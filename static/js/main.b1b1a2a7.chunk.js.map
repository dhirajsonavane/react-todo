{"version":3,"sources":["shared/NavBar.js","shared/Footer.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","AppBar","position","color","Toolbar","Typography","variant","Copyright","target","href","Date","getFullYear","useStyles","makeStyles","theme","root","display","flexDirection","minHeight","main","marginTop","spacing","marginBottom","footer","padding","backgroundColor","palette","type","grey","Footer","classes","className","Container","maxWidth","App","props","state","newItem","list","todoValue","id","now","value","isDone","this","push","setState","updatedlist","filter","item","input","style","justifyContent","Card","width","margin","CardContent","TextField","label","onChange","e","updateInput","marginRight","required","Button","onClick","addItem","disabled","length","map","key","Checkbox","name","checked","inputProps","IconButton","aria-label","deleteItem","float","fontSize","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b1b1a2a7.chunk.js","sourcesContent":["import React from \"react\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst NavBar = () => {\n  return (\n    <div>\n      <AppBar position=\"static\" color=\"secondary\">\n        <Toolbar>\n          <Typography variant=\"h5\" color=\"inherit\">\n            React Material UI - To Do App\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n};\n\nexport default NavBar;","import React from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Link from '@material-ui/core/Link';\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\">\n      {'Copyright Â© '}\n      <a color=\"inherit\" target='_blank' href=\"https://github.com/dhirajsonavane/react-github-users\">\n      React Material UI - Display Github Users\n      </a>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    minHeight: '10vh',\n  },\n  main: {\n    marginTop: theme.spacing(8),\n    marginBottom: theme.spacing(2),\n  },\n  footer: {\n    padding: theme.spacing(3, 2),\n    marginTop: 'auto',\n    backgroundColor:\n      theme.palette.type === 'light' ? theme.palette.grey[200] : theme.palette.grey[800],\n  },\n}));\n\nexport default function Footer() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <footer className={classes.footer}>\n        <Container maxWidth=\"sm\">\n          <Typography variant=\"body1\">Website created by Dhiraj Sonavane (dhiraj.sonavane@gmail.com)</Typography>\n          <Copyright />\n        </Container>\n      </footer>\n    </div>\n  );\n}","import React from \"react\";\nimport \"./App.css\";\n\nimport Typography from \"@material-ui/core/Typography\";\nimport Container from \"@material-ui/core/Container\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\n\nimport NavBar from \"./shared/NavBar\";\nimport Footer from \"./shared/Footer\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      newItem: \"\",\n      list: [],\n    };\n  }\n\n  addItem(todoValue) {\n    if (todoValue !== \"\") {\n      const newItem = {\n        id: Date.now(),\n        value: todoValue,\n        isDone: false,\n      };\n      const list = [...this.state.list];\n      list.push(newItem);\n\n      this.setState({\n        list,\n        newItem: \"\",\n      });\n    }\n  }\n\n  deleteItem(id) {\n    const list = [...this.state.list];\n    const updatedlist = list.filter((item) => item.id !== id);\n    this.setState({ list: updatedlist });\n  }\n\n  updateInput(input) {\n    this.setState({ newItem: input });\n  }\n\n  render() {\n    return (\n      <div>\n        <NavBar />\n\n        <Container style={{ display: \"flex\", justifyContent: \"center\" }}>\n          <Card style={{ width: 500, margin: 10 }}>\n            <CardContent>\n              <TextField\n                id=\"outlined-basic\"\n                label=\"Enter a Todo\"\n                variant=\"outlined\"\n                value={this.state.newItem}\n                onChange={(e) => this.updateInput(e.target.value)}\n                style={{ marginRight: 10 }}\n                required\n              />\n\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={() => this.addItem(this.state.newItem)}\n                disabled={!this.state.newItem.length}\n                style={{ marginTop: 10 }}\n              >\n                Add Todo\n              </Button>\n\n              <div className=\"list\">\n                <ul>\n                  {this.state.list.map((item) => {\n                    return (\n                      <li key={item.id}>\n                        <Checkbox\n                          name=\"idDone\"\n                          checked={item.isDone}\n                          onChange={() => {}}\n                          inputProps={{ \"aria-label\": \"primary checkbox\" }}\n                        />\n\n                        {item.value}\n\n                        <IconButton\n                          aria-label=\"delete\"\n                          onClick={() => this.deleteItem(item.id)}\n                          style={{float:'right'}}\n                        >\n                          <DeleteIcon fontSize=\"small\"/>\n                        </IconButton>\n                      </li>\n                    );\n                  })}\n                </ul>\n              </div>\n            </CardContent>\n          </Card>\n        </Container>\n\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}